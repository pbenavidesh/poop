---
title: "Prophet"
format: 
  html:
    toc: true
    embed-resources: true
---

```{r}
#| message: false

library(tidyverse)
library(fpp3)
library(fable.prophet)
```

```{r}
lax_passengers <- read.csv("https://raw.githubusercontent.com/mitchelloharawild/fable.prophet/master/data-raw/lax_passengers.csv")


lax_passengers <- lax_passengers |>
  mutate(datetime = mdy_hms(ReportPeriod)) |>
  group_by(month = yearmonth(datetime), type = Domestic_International) |>
  summarise(passengers = sum(Passenger_Count), .groups = "drop") |> 
  as_tsibble(index = month, key = type)
```

```{r}
lax_passengers
```

```{r}
lax_passengers |> 
  autoplot(passengers) +
  theme(legend.position = "top")
```

## train/test splits

Vamos a hacer un pronóstico a dos años.

```{r}
lax_pass_train <- lax_passengers |> 
  filter_index(. ~ "2017 Mar.")

lax_pass_train
```

## Model fitting

```{r}
tictoc::tic()
lax_pass_fit <- lax_pass_train |> 
  model(
    snaive = SNAIVE(passengers),
    snaive_drift = decomposition_model(
      STL(passengers, robust = TRUE),
      RW(season_adjust ~ drift())
    ),
    ets = ETS(passengers),
    sarima = ARIMA(passengers),
    reg_lin = TSLM(passengers ~ season() + trend()),
    reg_x_partes = TSLM(passengers~ season() + trend(knots = as.Date("2010-01-01"))),
    harmonic = ARIMA(passengers ~ fourier(K = 2) + PDQ(0,0,0)),
    prophet = prophet(passengers ~ growth("linear") + season("year", type = "multiplicative")),
    prophet_auto = prophet(passengers)
  )
tictoc::toc()
lax_pass_fit
```

```{r}
accuracy(lax_pass_fit) |> 
  arrange(type, MAPE) |> 
  select(type, .model, .type, MAPE, MASE, MAE, RMSE)
```

## forecast on the test set

```{r}
lax_pass_fc <- lax_pass_fit |> 
  forecast(h = "2 years")

lax_pass_fc |> 
  autoplot(lax_passengers |> filter_index("2014 Jan." ~ .), level = NULL)

p <- lax_pass_fc |> 
  ggplot(aes(x = month, y = .mean)) +
  geom_line(data = lax_passengers, aes(y = passengers)) +
  geom_line(aes(color = .model), alpha = 0.5) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()
```

Vamos a combinar los modelos `ets`, `prophet_auto` y `sarima`:

```{r}
lax_pass_fit <- lax_pass_fit |> 
  mutate(combinado = (ets + prophet_auto + sarima)/3)
lax_pass_fit
```

Corremos los pronósticos nuevamente:

```{r}
lax_pass_fc <- lax_pass_fit |> 
  forecast(h = "2 years")

p <- lax_pass_fc |> 
  ggplot(aes(x = month, y = .mean)) +
  geom_line(data = lax_passengers, aes(y = passengers)) +
  geom_line(aes(color = .model), alpha = 0.5) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()
```

```{r}
lax_pass_fc |> 
  accuracy(lax_passengers) |> 
  arrange(type, MAPE) |> 
  select(type, .model, .type, MAPE, MASE, MAE, RMSE)
```

```{r}
lax_pass_fit <- lax_pass_fit |> 
  mutate(combinado2 = (combinado + prophet)/2,
         combinado3 = (prophet + prophet_auto + ets + sarima)/4)

lax_pass_fc <- lax_pass_fit |> 
  select(combinado, combinado2, combinado3, prophet, prophet_auto, sarima, ets) |> 
  forecast(h = "2 years")

p <- lax_pass_fc |> 
  ggplot(aes(x = month, y = .mean)) +
  geom_line(data = lax_passengers, aes(y = passengers)) +
  geom_line(aes(color = .model)) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()

lax_pass_fc |> 
  accuracy(lax_passengers) |> 
  arrange(type, MAPE) |> 
  select(type, .model, .type, MAPE, MASE, MAE, RMSE)
```

```{r}
lax_pass_fc |> hilo()
```

```{r}
lax_pass_train |> 
  features(passengers, features = guerrero)
```

## Con logaritmos

```{r}
lax_pass_train |> 
  autoplot(passengers)
lax_pass_train |> 
  autoplot(log(passengers))
```

```{r}
tictoc::tic()
lax_pass_fit2 <- lax_pass_train |> 
  model(
    snaive = SNAIVE(log(passengers)),
    snaive_drift = decomposition_model(
      STL(log(passengers), robust = TRUE),
      RW(season_adjust ~ drift())
    ),
    ets = ETS(log(passengers)),
    sarima = ARIMA(log(passengers)),
    reg_lin = TSLM(log(passengers) ~ season() + trend()),
    reg_x_partes = TSLM(log(passengers)~ season() + trend(knots = as.Date("2010-01-01"))),
    harmonic = ARIMA(log(passengers) ~ fourier(K = 4) + PDQ(0,0,0)),
    prophet = prophet(log(passengers) ~ growth("linear") + season("year", type = "multiplicative")),
    prophet_auto = prophet(log(passengers))
  )
tictoc::toc()
lax_pass_fit2
```
```{r}
lax_pass_fc2 <- lax_pass_fit2 |> 
  forecast(h = "2 years")

lax_pass_fc2 |> 
  autoplot(lax_passengers |> filter_index("2014 Jan." ~ .), level = NULL)

p <- lax_pass_fc2 |> 
  ggplot(aes(x = month, y = .mean)) +
  geom_line(data = lax_passengers, aes(y = passengers)) +
  geom_line(aes(color = .model), alpha = 0.5) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()

lax_pass_fc2 |> 
  accuracy(lax_passengers)
```

```{r}
lax_pass_fit2 <- lax_pass_fit2 |> 
  mutate(combinado = (prophet + harmonic + ets + sarima + snaive_drift)/5) |> 
  select(-c(prophet_auto, snaive, reg_lin, reg_x_partes))

lax_pass_fc2 <- lax_pass_fit2 |> 
  forecast(h = "2 years")

p <- lax_pass_fc2 |> 
  ggplot(aes(x = month, y = .mean)) +
  geom_line(data = lax_passengers, aes(y = passengers)) +
  geom_line(aes(color = .model), alpha = 0.5) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()

lax_pass_fc2 |> 
  accuracy(lax_passengers) |> 
  arrange(type, MAPE) |> 
  select(type, .model, .type, MAPE, MASE, MAE, RMSE)
```

